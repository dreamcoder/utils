{"version":3,"file":"utils.esm.js","sources":["../src/debounce.ts","../src/helpers.ts","../src/string.ts","../src/math.ts","../src/canned.ts","../src/typingStatus.ts"],"sourcesContent":["// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\n/**\n * @func Callback function to be called after delay\n * @delay Delay for debounce in ms\n * @immediate should execute immediately\n * @returns debounced callback function\n */\nexport const debounce = (\n  func: (args: any) => void,\n  wait: number,\n  immediate?: boolean\n) => {\n  let timeout: number | undefined | null;\n\n  return function() {\n    const context = null;\n    const args = arguments;\n    const later = function() {\n      timeout = null;\n      if (!immediate) func.apply(context, args as any);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout as number);\n    timeout = window.setTimeout(later, wait);\n    if (callNow) func.apply(context, args as any);\n  };\n};\n","import isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\n/**\n * @name Get contrasting text color\n * @description Get contrasting text color from a text color\n * @param bgColor  Background color of text.\n * @returns contrasting text color\n */\nexport const getContrastingTextColor = (bgColor: string): string => {\n  const color = bgColor.replace('#', '');\n  const r = parseInt(color.slice(0, 2), 16);\n  const g = parseInt(color.slice(2, 4), 16);\n  const b = parseInt(color.slice(4, 6), 16);\n  // http://stackoverflow.com/a/3943023/112731\n  return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';\n};\n\n/**\n * @name Get formatted date\n * @description Get date in today, yesterday or any other date format\n * @param date  date\n * @param todayText  Today text\n * @param yesterdayText  Yesterday text\n * @returns formatted date\n */\nexport const formatDate = ({\n  date,\n  todayText,\n  yesterdayText,\n}: {\n  date: string;\n  todayText: string;\n  yesterdayText: string;\n}) => {\n  const dateValue = new Date(date);\n  if (isToday(dateValue)) return todayText;\n  if (isYesterday(dateValue)) return yesterdayText;\n  return date;\n};\n\n/**\n * @name formatTime\n * @description Format time to Hour, Minute and Second\n * @param timeInSeconds  number\n * @returns formatted time\n */\n\nexport const formatTime = (timeInSeconds: number) => {\n  let formattedTime = '';\n  if (timeInSeconds >= 60 && timeInSeconds < 3600) {\n    const minutes = Math.floor(timeInSeconds / 60);\n    formattedTime = `${minutes} Min`;\n    const seconds = minutes === 60 ? 0 : Math.floor(timeInSeconds % 60);\n    return formattedTime + `${seconds > 0 ? ' ' + seconds + ' Sec' : ''}`;\n  }\n  if (timeInSeconds >= 3600 && timeInSeconds < 86400) {\n    const hours = Math.floor(timeInSeconds / 3600);\n    formattedTime = `${hours} Hr`;\n    const minutes =\n      timeInSeconds % 3600 < 60 || hours === 24\n        ? 0\n        : Math.floor((timeInSeconds % 3600) / 60);\n    return formattedTime + `${minutes > 0 ? ' ' + minutes + ' Min' : ''}`;\n  }\n  if (timeInSeconds >= 86400) {\n    const days = Math.floor(timeInSeconds / 86400);\n    formattedTime = `${days} Day`;\n    const hours =\n      timeInSeconds % 86400 < 3600 || days >= 364\n        ? 0\n        : Math.floor((timeInSeconds % 86400) / 3600);\n    return formattedTime + `${hours > 0 ? ' ' + hours + ' Hr' : ''}`;\n  }\n  return `${Math.floor(timeInSeconds)} Sec`;\n};\n\n/**\n * @name trimContent\n * @description Trim a string to max length\n * @param content String to trim\n * @param maxLength Length of the string to trim, default 1024\n * @param ellipsis Boolean to add dots at the end of the string, default false\n * @returns trimmed string\n */\nexport const trimContent = (\n  content: string = '',\n  maxLength: number = 1024,\n  ellipsis: boolean = false\n) => {\n  let trimmedContent = content;\n  if (content.length > maxLength) {\n    trimmedContent = content.substring(0, maxLength);\n  }\n  if (ellipsis) {\n    trimmedContent = trimmedContent + '...';\n  }\n  return trimmedContent;\n};\n\n/**\n * @name convertSecondsToTimeUnit\n * @description Convert seconds to time unit\n * @param seconds  number\n * @param unitNames  object\n * @returns time and unit\n * @example\n * convertToUnit(60, { minute: 'm', hour: 'h', day: 'd' }); // { time: 1, unit: 'm' }\n * convertToUnit(60, { minute: 'Minutes', hour: 'Hours', day: 'Days' }); // { time: 1, unit: 'Minutes' }\n */\n\nexport const convertSecondsToTimeUnit = (\n  seconds: number,\n  unitNames: { minute: string; hour: string; day: string }\n) => {\n  if (seconds === null || seconds === 0)\n    return { time: null, unit: unitNames.minute };\n  if (seconds < 3600)\n    return { time: Number((seconds / 60).toFixed(1)), unit: unitNames.minute };\n  if (seconds < 86400)\n    return { time: Number((seconds / 3600).toFixed(1)), unit: unitNames.hour };\n  return { time: Number((seconds / 86400).toFixed(1)), unit: unitNames.day };\n};\n","/**\n * Function that parses a string boolean value and returns the corresponding boolean value\n * @param {string | number} candidate - The string boolean value to be parsed\n * @return {boolean} - The parsed boolean value\n */\n\nexport function parseBoolean(candidate: string | number) {\n  try {\n    // lowercase the string, so TRUE becomes true\n    const candidateString = String(candidate).toLowerCase();\n\n    // wrap in boolean to ensure that the return value\n    // is a boolean even if values like 0 or 1 are passed\n    return Boolean(JSON.parse(candidateString));\n  } catch (error) {\n    return false;\n  }\n}\n","/**\n * Sorts an array of numbers in ascending order.\n * @param {number[]} arr - The array of numbers to be sorted.\n * @returns {number[]} - The sorted array.\n */\nexport function sortAsc(arr: number[]) {\n  // .slice() is used to create a copy of the array so that the original array is not mutated\n  return arr.slice().sort((a, b) => a - b);\n}\n\n/**\n * Calculates the quantile value of an array at a specified percentile.\n * @param {number[]} arr - The array of numbers to calculate the quantile value from.\n * @param {number} q - The percentile to calculate the quantile value for.\n * @returns {number} - The quantile value.\n */\nexport function quantile(arr: number[], q: number) {\n  const sorted = sortAsc(arr); // Sort the array in ascending order\n  return _quantileForSorted(sorted, q); // Calculate the quantile value\n}\n\n/**\n * Clamps a value between a minimum and maximum range.\n * @param {number} min - The minimum range.\n * @param {number} max - The maximum range.\n * @param {number} value - The value to be clamped.\n * @returns {number} - The clamped value.\n */\nexport function clamp(min: number, max: number, value: number) {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\n/**\n * This method assumes the the array provided is already sorted in ascending order.\n * It's a helper method for the quantile method and should not be exported as is.\n *\n * @param {number[]} arr - The array of numbers to calculate the quantile value from.\n * @param {number} q - The percentile to calculate the quantile value for.\n * @returns {number} - The quantile value.\n */\nfunction _quantileForSorted(sorted: number[], q: number) {\n  const clamped = clamp(0, 1, q); // Clamp the percentile between 0 and 1\n  const pos = (sorted.length - 1) * clamped; // Calculate the index of the element at the specified percentile\n  const base = Math.floor(pos); // Find the index of the closest element to the specified percentile\n  const rest = pos - base; // Calculate the decimal value between the closest elements\n\n  // Interpolate the quantile value between the closest elements\n  // Most libraries don't to the interpolation, but I'm just having fun here\n  // also see https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample\n  if (sorted[base + 1] !== undefined) {\n    // in case the position was a integer, the rest will be 0 and the interpolation will be skipped\n    return sorted[base] + rest * (sorted[base + 1] - sorted[base]);\n  }\n\n  // Return the closest element if there is no interpolation possible\n  return sorted[base];\n}\n\n/**\n * Calculates the quantile values for an array of intervals.\n * @param {number[]} data - The array of numbers to calculate the quantile values from.\n * @param {number[]} intervals - The array of intervals to calculate the quantile values for.\n * @returns {number[]} - The array of quantile values for the intervals.\n */\nexport const getQuantileIntervals = (data: number[], intervals: number[]) => {\n  // Sort the array in ascending order before looping through the intervals.\n  // depending on the size of the array and the number of intervals, this can speed up the process by at least twice\n  // for a random array of 100 numbers and 5 intervals, the speedup is 3x\n  const sorted = sortAsc(data);\n\n  return intervals.map(interval => {\n    return _quantileForSorted(sorted, interval);\n  });\n};\n","import {\n  Conversation,\n  Sender,\n  Variables,\n  CustomAttributes,\n  Contact,\n} from './types/conversation';\nconst MESSAGE_VARIABLES_REGEX = /{{(.*?)}}/g;\n\nconst skipCodeBlocks = (str: string) => str.replace(/```(?:.|\\n)+?```/g, '');\n\nexport const capitalizeName = (name: string | null) => {\n  return (name || '').replace(/\\b(\\w)/g, s => s.toUpperCase());\n};\n\nexport const getFirstName = ({ user }: { user: Sender }) => {\n  const firstName = user?.name ? user.name.split(' ').shift() : '';\n  return capitalizeName(firstName as string);\n};\n\nexport const getLastName = ({ user }: { user: Sender }) => {\n  if (user && user.name) {\n    const lastName =\n      user.name.split(' ').length > 1 ? user.name.split(' ').pop() : '';\n    return capitalizeName(lastName as string);\n  }\n  return '';\n};\n\nexport const getMessageVariables = ({\n  conversation,\n  contact,\n}: {\n  conversation: Conversation;\n  contact?: Contact;\n}) => {\n  const {\n    meta: { assignee, sender },\n    id,\n    custom_attributes: conversationCustomAttributes = {},\n  } = conversation;\n  const { custom_attributes: contactCustomAttributes } = contact || {};\n\n  const standardVariables = {\n    'contact.name': capitalizeName(sender?.name || ''),\n    'contact.first_name': getFirstName({ user: sender }),\n    'contact.last_name': getLastName({ user: sender }),\n    'contact.email': sender?.email,\n    'contact.phone': sender?.phone_number,\n    'contact.id': sender?.id,\n    'conversation.id': id,\n    'agent.name': capitalizeName(assignee?.name || ''),\n    'agent.first_name': getFirstName({ user: assignee }),\n    'agent.last_name': getLastName({ user: assignee }),\n    'agent.email': assignee?.email ?? '',\n  };\n  const conversationCustomAttributeVariables = Object.entries(\n    conversationCustomAttributes as CustomAttributes\n  ).reduce((acc: CustomAttributes, [key, value]) => {\n    acc[`conversation.custom_attribute.${key}`] = value;\n    return acc;\n  }, {});\n\n  const contactCustomAttributeVariables = Object.entries(\n    contactCustomAttributes as CustomAttributes\n  ).reduce((acc: CustomAttributes, [key, value]) => {\n    acc[`contact.custom_attribute.${key}`] = value;\n    return acc;\n  }, {});\n\n  const variables = {\n    ...standardVariables,\n    ...conversationCustomAttributeVariables,\n    ...contactCustomAttributeVariables,\n  };\n\n  return variables;\n};\n\nexport const replaceVariablesInMessage = ({\n  message,\n  variables,\n}: {\n  message: string;\n  variables: Variables;\n}) => {\n  // @ts-ignore\n  return message?.replace(MESSAGE_VARIABLES_REGEX, (_, replace) => {\n    return variables[replace.trim()]\n      ? variables[replace.trim().toLowerCase()]\n      : '';\n  });\n};\n\nexport const getUndefinedVariablesInMessage = ({\n  message,\n  variables,\n}: {\n  message: string;\n  variables: Variables;\n}) => {\n  const messageWithOutCodeBlocks = skipCodeBlocks(message);\n  const matches = messageWithOutCodeBlocks.match(MESSAGE_VARIABLES_REGEX);\n  if (!matches) return [];\n\n  return matches\n    .map(match => {\n      return match\n        .replace('{{', '')\n        .replace('}}', '')\n        .trim();\n    })\n    .filter(variable => {\n      return variables[variable] === undefined;\n    });\n};\n","/**\n * Creates a typing indicator utility.\n * @param onStartTyping Callback function to be called when typing starts\n * @param onStopTyping Callback function to be called when typing stops after delay\n * @param idleTime Delay for idle time in ms before considering typing stopped\n * @returns An object with start and stop methods for typing indicator\n */\n\ntype CallbackFunction = () => void;\ntype Timeout = ReturnType<typeof setTimeout>;\n\nexport const createTypingIndicator = (\n  onStartTyping: CallbackFunction,\n  onStopTyping: CallbackFunction,\n  idleTime: number\n) => {\n  let timer: Timeout | null = null;\n\n  const start = (): void => {\n    if (!timer) {\n      onStartTyping();\n    }\n    reset();\n  };\n\n  const stop = (): void => {\n    if (timer) {\n      clearTimeout(timer as Timeout);\n      timer = null;\n      onStopTyping();\n    }\n  };\n\n  const reset = (): void => {\n    if (timer) {\n      clearTimeout(timer as Timeout);\n    }\n    timer = setTimeout(() => {\n      stop();\n    }, idleTime) as Timeout;\n  };\n\n  return { start, stop };\n};\n"],"names":["debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","window","setTimeout","getContrastingTextColor","bgColor","color","replace","r","parseInt","slice","g","b","formatDate","date","todayText","yesterdayText","dateValue","Date","isToday","isYesterday","formatTime","timeInSeconds","formattedTime","minutes","Math","floor","seconds","hours","days","trimContent","content","maxLength","ellipsis","trimmedContent","length","substring","convertSecondsToTimeUnit","unitNames","time","unit","minute","Number","toFixed","hour","day","parseBoolean","candidate","candidateString","String","toLowerCase","Boolean","JSON","parse","error","sortAsc","arr","sort","a","quantile","q","sorted","_quantileForSorted","clamp","min","max","value","clamped","pos","base","rest","undefined","getQuantileIntervals","data","intervals","map","interval","MESSAGE_VARIABLES_REGEX","skipCodeBlocks","str","capitalizeName","name","s","toUpperCase","getFirstName","user","firstName","split","shift","getLastName","lastName","pop","getMessageVariables","conversation","contact","meta","assignee","sender","id","custom_attributes","conversationCustomAttributes","contactCustomAttributes","standardVariables","email","phone_number","conversationCustomAttributeVariables","Object","entries","reduce","acc","key","contactCustomAttributeVariables","variables","replaceVariablesInMessage","message","_","trim","getUndefinedVariablesInMessage","messageWithOutCodeBlocks","matches","match","filter","variable","createTypingIndicator","onStartTyping","onStopTyping","idleTime","timer","start","reset","stop"],"mappings":"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"}